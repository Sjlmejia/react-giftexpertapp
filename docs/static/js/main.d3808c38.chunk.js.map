{"version":3,"sources":["components/AddCategory.js","helpers/getGifs.js","components/GifGridItem.js","components/GifGrid.js","hooks/useFetchGifs.js","GifExpertApp.js","index.js"],"names":["AddCategory","setCategories","useState","inputValue","setInputValue","onSubmit","e","preventDefault","trim","length","cats","type","value","onChange","target","getGifs","category","a","url","encodeURI","fetch","resp","json","data","gifs","map","img","id","title","images","downsized_medium","GifGridItem","className","src","alt","GifGrid","loading","state","setState","useEffect","then","imgs","useFetchGifs","GifExpertApp","categories","divRoot","document","querySelector","ReactDOM","render"],"mappings":"mMAEaA,EAAc,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,cAE3B,EAAkCC,mBAAS,IAA3C,mBAAKC,EAAL,KAAiBC,EAAjB,KAUA,OACE,sBAAMC,SAPa,SAACC,GACpBA,EAAEC,iBACEJ,EAAWK,OAAOC,OAAS,GAC7BR,GAAc,SAAAS,GAAI,OAAKP,GAAL,mBAAoBO,QAIxC,SACE,uBACEC,KAAM,OACNC,MAAQT,EACRU,SAAW,SAACP,GAbhBF,EAamCE,EAbfQ,OAAOF,a,+BCNhBG,EAAO,uCAAG,WAAMC,GAAN,uBAAAC,EAAA,6DACfC,EADe,0DAC2CC,UAAUH,GADrD,sDAEFI,MAAMF,GAFJ,cAEfG,EAFe,gBAGAA,EAAKC,OAHL,uBAGdC,EAHc,EAGdA,KACDC,EAAOD,EAAKE,KAAK,SAAAC,GAAQ,IAAD,EAC5B,MAAO,CACLC,GAAID,EAAIC,GACRC,MAAOF,EAAIE,MACXV,IAAG,UAAEQ,EAAIG,cAAN,aAAE,EAAYC,iBAAiBZ,QARjB,kBAWdM,GAXc,4CAAH,sDCETO,EAAc,SAAC,GAAqB,EAApBJ,GAAqB,IAAjBC,EAAgB,EAAhBA,MAAOV,EAAS,EAATA,IACtC,OACE,sBAAKc,UAAU,yCAAf,UACE,qBAAKC,IAAKf,EAAKgB,IAAKN,IACpB,4BAAKA,QCeIO,EAlBC,SAAC,GAAgB,IAAfnB,EAAc,EAAdA,SAChB,ECD0B,SAACA,GAC3B,MAA0Bd,mBAAS,CACjCqB,KAAK,GACLa,SAAS,IAFX,mBAAOC,EAAP,KAAcC,EAAd,KAaA,OATEC,qBAAW,WACTxB,EAAQC,GACPwB,MAAK,SAAAC,GACJH,EAAS,CACPf,KAAMkB,EACNL,SAAS,SAGZ,CAAEpB,IACAqB,EDb0BK,CAAa1B,GAAjCa,EAAb,EAAQN,KAAR,EAAqBa,QAGrB,OACE,qCACE,6BAAMpB,IACN,qBAAKgB,UAAU,YAAf,SAEIH,EAAOJ,KAAI,SAAAC,GACT,OAAO,cAAC,EAAD,eAA8BA,GAAZA,EAAIC,aEY1BgB,EArBM,WACnB,IACA,EAAkCzC,mBADV,CAAC,cACzB,mBAAK0C,EAAL,KAAiB3C,EAAjB,KACA,OACE,qCACE,8CACA,cAAC,EAAD,CAAaA,cAAeA,IAC5B,uBACA,6BAEI2C,EAAWnB,KAAI,SAAAT,GAAQ,OACrB,cAAC,EAAD,CAEEA,SAAWA,GADJA,YCZf6B,G,MAAUC,SAASC,cAAc,UACvCC,IAASC,OACL,cAAC,EAAD,IAAkBJ,K","file":"static/js/main.d3808c38.chunk.js","sourcesContent":["import React, { useState } from \"react\";\r\nimport PropTypes from 'prop-types';\r\nexport const AddCategory = ({setCategories}) => {\r\n\r\n  let [inputValue, setInputValue] = useState('')\r\n  const onChangeValue = (value) => {\r\n    setInputValue(value.target.value)\r\n  }\r\n  const handleSubmit = (e) => {\r\n    e.preventDefault();\r\n    if( inputValue.trim().length > 2) {\r\n      setCategories(cats => [inputValue, ...cats])\r\n    }\r\n  }\r\n  return (\r\n    <form onSubmit= {handleSubmit}>\r\n      <input\r\n        type= \"text\"\r\n        value= {inputValue}\r\n        onChange= {(e)=>{onChangeValue(e)}}\r\n      ></input>\r\n    </form>\r\n  )\r\n}\r\n\r\nAddCategory.propTypes = {\r\n  setCategories: PropTypes.func.isRequired\r\n}","  export const getGifs = async(category) =>{\r\n    const url = `https://api.giphy.com/v1/gifs/search?limit=10&q=${ encodeURI(category) }&api_key=VO8kI2aZVoSVHx2N0wLS8ITH0CHoEW2a`;\r\n    const resp = await fetch(url);\r\n    const {data} = await resp.json();\r\n    const gifs = data.map( img => {\r\n      return {\r\n        id: img.id,\r\n        title: img.title,\r\n        url: img.images?.downsized_medium.url\r\n      }\r\n    })\r\n    return gifs;\r\n  }","import React from 'react'\r\n\r\nexport const GifGridItem = ({id, title, url}) => {\r\n  return (\r\n    <div className=\"card animate__animated animate__bounce\">\r\n      <img src={url} alt={title}/>\r\n      <p>{ title }</p>\r\n    </div>\r\n  )\r\n}\r\n","import React from \"react\";\r\nimport { useFetchGifs } from \"../hooks/useFetchGifs\";\r\nimport { GifGridItem } from \"./GifGridItem\";\r\nconst GifGrid = ({category}) => {\r\n  const { data:images, loading } = useFetchGifs(category);\r\n\r\n\r\n  return (\r\n    <>\r\n      <h3>{ category }</h3>\r\n      <div className=\"card-grid\">\r\n        {\r\n          images.map(img => {\r\n            return <GifGridItem key={img.id} {...img}/>\r\n          })\r\n        }\r\n      </div>\r\n    </>  \r\n  )\r\n}\r\n\r\nexport default GifGrid; ","import { useState, useEffect} from \"react\"\r\nimport { getGifs } from \"../helpers/getGifs\";\r\n\r\nexport const useFetchGifs = (category) => {\r\n  const [state, setState] = useState({\r\n    data:[],\r\n    loading: true\r\n  });\r\n    useEffect( () => {\r\n      getGifs(category)\r\n      .then(imgs => {\r\n        setState({\r\n          data: imgs,\r\n          loading: false\r\n        })\r\n      })\r\n    }, [ category])\r\n  return state;\r\n}","import React, { useState } from \"react\";\r\nimport { AddCategory } from \"./components/AddCategory\";\r\nimport GifGrid from \"./components/GifGrid\";\r\n\r\nconst GifExpertApp = () => {\r\n  const categoriesArray = ['One punch'];\r\n  let [categories, setCategories] = useState(categoriesArray);\r\n  return (\r\n    <>\r\n      <h2>GifexpertApp</h2>\r\n      <AddCategory setCategories={setCategories}/>\r\n      <hr/>\r\n      <ol>\r\n        {\r\n          categories.map(category => (\r\n            <GifGrid\r\n              key= { category } \r\n              category={ category }\r\n            />\r\n          ))\r\n        }\r\n      </ol>\r\n    </>\r\n  )\r\n}\r\nexport default GifExpertApp;","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport GifExpertApp from './GifExpertApp';\nimport './index.css'\nconst divRoot = document.querySelector('#root');\nReactDOM.render(\n    <GifExpertApp />, divRoot\n);\n"],"sourceRoot":""}